h2. Component FileInventoryDifference

h4. Data Model

* *[#FileInventoryDifference] = compares two [#FileInventory] instances based on file signatures and pathnames*
** [#FileGroupDifference] \[1..\*] = performs analysis and reports differences between two matching [#FileGroup] objects
*** [#FileGroupDifferenceSubset] \[1..5] = collects a set of file-level differences of a give change type
**** [#FileInstanceDifference] \[1..\*] = contains difference information at the file level
        \* [#FileSignature] \[1..2] = contains the file signature(s) of two file instances being compared


h4. Description

Compares two [#FileInventory] instances based primarily on file signatures and secondarily on file pathnames.
Although the usual use will be to compare the content of 2 different temporal versions of the same object,
it can also be used to verify an inventory document against an inventory harvested from a directory.
The report is subdivided into sections for each of the file groups that compose the inventories being compared.


h4. XML Example
{code:lang=xml}
<?xml version="1.0" encoding="UTF-8"?>
<fileInventoryDifference objectId="druid:jq937jp0017" differenceCount="9" basis="v1" other="v3" reportDatetime="2012-04-19T12:12:48Z">
  <fileGroupDifference groupId="content" differenceCount="6" identical="1" renamed="2" modified="1" deleted="2" added="1">
    <subset change="identical" count="1">
      <file change="identical" basisPath="title.jpg" otherPath="same">
        <fileSignature size="40873" md5="1a726cd7963bd6d3ceb10a8c353ec166" sha1="583220e0572640abcd3ddd97393d224e8053a6ad"/>
      </file>
    </subset>
    <subset change="renamed" count="2">
      <file change="renamed" basisPath="page-2.jpg" otherPath="page-3.jpg">
        <fileSignature size="39450" md5="82fc107c88446a3119a51a8663d1e955" sha1="d0857baa307a2e9efff42467b5abd4e1cf40fcd5"/>
      </file>
      <file change="renamed" basisPath="page-3.jpg" otherPath="page-4.jpg">
        <fileSignature size="19125" md5="a5099878de7e2e064432d6df44ca8827" sha1="c0ccac433cf02a6cee89c14f9ba6072a184447a2"/>
      </file>
    </subset>
    <subset change="modified" count="1">
      <file change="modified" basisPath="page-1.jpg" otherPath="same">
        <fileSignature size="25153" md5="3dee12fb4f1c28351c7482b76ff76ae4" sha1="906c1314f3ab344563acbbbe2c7930f08429e35b"/>
        <fileSignature size="32915" md5="c1c34634e2f18a354cd3e3e1574c3194" sha1="0616a0bd7927328c364b2ea0b4a79c507ce915ed"/>
      </file>
    </subset>
    <subset change="deleted" count="2">
      <file change="deleted" basisPath="intro-1.jpg" otherPath="">
        <fileSignature size="41981" md5="915c0305bf50c55143f1506295dc122c" sha1="60448956fbe069979fce6a6e55dba4ce1f915178"/>
      </file>
      <file change="deleted" basisPath="intro-2.jpg" otherPath="">
        <fileSignature size="39850" md5="77f1a4efdcea6a476505df9b9fba82a7" sha1="a49ae3f3771d99ceea13ec825c9c2b73fc1a9915"/>
      </file>
    </subset>
    <subset change="added" count="1">
      <file change="added" basisPath="" otherPath="page-2.jpg">
        <fileSignature size="39539" md5="fe6e3ffa1b02ced189db640f68da0cc2" sha1="43ced73681687bc8e6f483618f0dcff7665e0ba7"/>
      </file>
    </subset>
  </fileGroupDifference>
  <fileGroupDifference groupId="metadata" differenceCount="3" identical="2" renamed="0" modified="3" deleted="0" added="0">
    <subset change="identical" count="2">
      <file change="identical" basisPath="descMetadata.xml" otherPath="same">
        <fileSignature size="3046" md5="a60bb487db6a1ceb5e0b5bb3cae2dfa2" sha1="edefc0e1d7cffd5bd3c7db6a393ab7632b70dc2d"/>
      </file>
      <file change="identical" basisPath="identityMetadata.xml" otherPath="same">
        <fileSignature size="12903" md5="ccb5bf2ae0c2c6ad0b89692fa1e10145" sha1="3badb0d06aef40f14e4664d2594c6060b9e9716b"/>
      </file>
    </subset>
    <subset change="renamed" count="0"/>
    <subset change="modified" count="3">
      <file change="modified" basisPath="contentMetadata.xml" otherPath="same">
        <fileSignature size="1619" md5="b886db0d14508884150a916089da840f" sha1="b2328faaf25caf037cfc0263896ad707fc3a47a7"/>
        <fileSignature size="1376" md5="44caefdbaf92f808c3fd27d693338c40" sha1="eb6f9c6539c90412bb4994d13311cc8dfe37c334"/>
      </file>
      <file change="modified" basisPath="provenanceMetadata.xml" otherPath="same">
        <fileSignature size="5306" md5="17193dbf595571d728ba59aa31638db9" sha1="c8b91eacf9ad7532a42dc52b3c9cf03b4ad2c7f6"/>
        <fileSignature size="564" md5="17071e4607de4b272f3f06ec76be4c4a" sha1="b796a0b569bde53953ba0835bb47f4009f654349"/>
      </file>
      <file change="modified" basisPath="versionMetadata.xml" otherPath="same">
        <fileSignature size="384" md5="f16a2564fae2706a8c82cda6dccdb4d9" sha1="7aaf84f63a1db803d272352f03935d303f066560"/>
        <fileSignature size="1571" md5="6ec3d879c5a91922889adc916d991db5" sha1="65c65bedf285fc87c1ea14646bc47e79762359d3"/>
      </file>
    </subset>
    <subset change="deleted" count="0"/>
    <subset change="added" count="0"/>
  </fileGroupDifference>
</fileInventoryDifference>
{code}

h4. XML Nodes
\\
||XML Element||Ruby Class||Inherits From||
|<fileInventoryDifference>|[#FileInventoryDifference]|Manifest|
\\
||XML Child Node||Ruby Attribute||Data Type||Description||
|@objectId|digital_object_id|String|The digital object ID (druid)|
|@differenceCount|difference_count|Integer|the number of differences found between the two inventories that were compared (dynamically calculated)|
|@basis|basis|String|Id information from the version inventory used as the basis for comparison|
|@other|other|String|Id information about the version inventory compared to the basis|
|@reportDatetime|report_datetime|Time|The datetime at which the report was run|
|<fileGroupDifference> \[1..\*]|group_differences|Array<FileGroupDifference>|The set of data groups comprising the version|
\\
||XML Element||Ruby Class||Inherits From||
|<fileGroupDifference>|[#FileGroupDifference]|Serializable|
\\
||XML Child Node||Ruby Attribute||Data Type||Description||
|@groupId|group_id|String|The name of the file group|
|@differenceCount|difference_count|Integer|the total number of differences found between the two inventories that were compared  (dynamically calculated)|
|@identical|identical|Integer|How many files were unchanged|
|@renamed|renamed|Integer|How many files were renamed|
|@modified|modified|Integer|How many files were modified|
|@deleted|deleted|Integer|How many files were deleted|
|@added|added|Integer|How many files were added|
|<subset> \[1..\*]|subsets|Array<FileGroupDifferenceSubset>|A set of Arrays (one for each change type), each of which contains an collection of file-level differences having that change type.|
\\
||XML Element||Ruby Class||Inherits From||
|<subset>|[#FileGroupDifferenceSubset]|Serializable|
\\
||XML Child Node||Ruby Attribute||Data Type||Description||
|@change|change|String|The type of change (identical\\|renamed\\|modified\\|deleted\\|added)|
|@count|count|Integer|How many files were changed|
|<file> \[1..\*]|files|Array<FileInstanceDifference>|The set of file instances having this type of change|
\\
||XML Element||Ruby Class||Inherits From||
|<file>|[#FileInstanceDifference]|Serializable|
\\
||XML Child Node||Ruby Attribute||Data Type||Description||
|@change|change|String|The type of file change|
|@basisPath|basis_path|String|The file's path in the basis inventory (usually for an old version)|
|@otherPath|other_path|String|The file's path in the other inventory (usually for an new version) compared against the basis|
|<fileSignature> \[1..\*]|signatures|Array<FileSignature>|The fixity data of the file manifestation(s) (plural if change was a content modification)|
\\
||XML Element||Ruby Class||Inherits From||
|<fileSignature>|[#FileSignature]|Serializable|
\\
||XML Child Node||Ruby Attribute||Data Type||Description||
|@size|size|Integer|The size of the file in bytes|
|@md5|md5|String|The MD5 checksum value of the file|
|@sha1|sha1|String|The SHA1 checksum value of the file|

{anchor:FileInventoryDifference}
h3. Class Moab::FileInventoryDifference

h4. Instance Methods

h5. Moab::FileInventoryDifference#compare
||Method||Return Type||Description||
|compare|FileInventoryDifference|Returns a report showing the differences, if any, between two inventories|

||Parameter||Data Type||Description||
|basis_inventory|FileInventory|The inventory that is the basis of the comparison|
|other_inventory|FileInventory|The inventory that is compared against the basis inventory|
{code:lang=none|title=Ruby Source Code}
def compare(basis_inventory, other_inventory)
  @digital_object_id ||= common_object_id(basis_inventory, other_inventory)
  @basis ||= basis_inventory.data_source
  @other ||= other_inventory.data_source
  @report_datetime = Time.now
  group_ids = basis_inventory.groups.keys | other_inventory.groups.keys
  group_ids.each do |group_id|
    basis_group = basis_inventory.groups.keyfind(group_id)
    other_group = other_inventory.groups.keyfind(group_id)
    unless (basis_group.nil? || other_group.nil?)
     @group_differences << FileGroupDifference.new.compare_file_groups(basis_group, other_group)
    end
  end
  self
end{code}

{code:lang=none|title=Usage Example}
require 'spec_helper'

feature "Compare versions" do
  #  In order to: determine what changes are present in a new version
  #  The application needs to: compare file inventories

  scenario "Compare fileInventory objects of 2 versions" do
    # given: two fileInventory instances
    # action: parse the XML to create in-memory objects
    #       : compare the inventories
    # outcome: a report of which files have changed

   # @v1_data_directory = @fixtures.join('data/jq937jp0017/v1')
    v1_inventory_pathname = @fixtures.join('derivatives/ingests/jq937jp0017/v0001/versionInventory.xml')
    v1_inventory = FileInventory.parse(v1_inventory_pathname.read)
    v2_inventory_pathname = @fixtures.join('derivatives/ingests/jq937jp0017/v0002/versionInventory.xml')
    v2_inventory = FileInventory.parse(v2_inventory_pathname.read)
    opts = {}
    file_inventory_difference = FileInventoryDifference.new(opts)
    basis_inventory = v1_inventory
    other_inventory = v2_inventory
    diff = file_inventory_difference.compare(basis_inventory, other_inventory)
    diff.should be_instance_of(FileInventoryDifference)
    diff.group_differences.size.should == 2
    diff.basis.should == "v1"
    diff.other.should == "v2"
    diff.difference_count.should == 6
    diff.digital_object_id.should == "druid:jq937jp0017"
  end

end{code}

h5. Moab::FileInventoryDifference#compare_with_directory
||Method||Return Type||Description||
|compare_with_directory|FileInventoryDifference|Returns a report showing the differences, if any, between the manifest file and the contents of the data directory|

||Parameter||Data Type||Description||
|basis_inventory|FileInventory|The inventory that is the basis of the comparison|
|data_directory|Pathname, String|location of the directory to compare against the inventory|
|group_id|String|if specified, is used to set the group ID of the FileGroup created from the directory if nil, then the directory is assumed to contain both content and metadata subdirectories|
{code:lang=none|title=Ruby Source Code}
def compare_with_directory(basis_inventory, data_directory, group_id=nil)
  directory_inventory = FileInventory.new(:type=>'directory').inventory_from_directory(data_directory,group_id)
  compare(basis_inventory, directory_inventory)
  self
end{code}

{code:lang=none|title=Usage Example}
require 'spec_helper'

feature "Compare inventory against directory" do
  #  In order to: determine the difference between a file inventory and a directory
  #  The application needs to: generate a differences report

  scenario "Generate differences report comparing inventory to directory" do
    # given: a directory path and an existing inventory
    # action: generate an inventory for the directory and compare inventories
    # outcome: differences report

    v1_data_directory = @fixtures.join('data/jq937jp0017/v1')
    v1_inventory_pathname = @fixtures.join('derivatives/ingests/jq937jp0017/v0001/versionInventory.xml')
    v1_inventory = FileInventory.parse(v1_inventory_pathname.read)
    opts = {}
    file_inventory_difference = FileInventoryDifference.new(opts)
    diff = file_inventory_difference.compare_with_directory(v1_inventory,v1_data_directory)
    diff.group_differences.size.should == 2
    diff.basis.should == "v1"
    diff.other.should include("data/jq937jp0017/v1/content")
    diff.difference_count.should == 0
    diff.digital_object_id.should == "druid:jq937jp0017|"

  end

end{code}

h5. Moab::FileInventoryDifference#verify_against_directory
||Method||Return Type||Description||
|verify_against_directory|Boolean|Returns true if the manifest file accurately represents the contents of the data directory|

||Parameter||Data Type||Description||
|basis_inventory|FileInventory|The inventory that is the basis of the comparison|
|data_directory|Pathname, String|location of the directory to compare against the inventory|
|group_id|String|if specified, is used to set the group ID of the FileGroup created from the directory if nil, then the directory is assumed to contain both content and metadata subdirectories|
{code:lang=none|title=Ruby Source Code}
def verify_against_directory(basis_inventory, data_directory, group_id=nil)
  compare_with_directory(basis_inventory, data_directory, group_id)
  difference_count == 0
end{code}

{code:lang=none|title=Usage Example}
require 'spec_helper'

feature "Validate inventory against directory" do
  #  In order to: determine if a file inventory correctly describes a directory
  #  The application needs to: generate a differences report and look for zero changes

  scenario "Generate differences report comparing inventory to directory" do
    # given: a directory path and an existing inventory
    # action: generate an inventory for the directory and compare inventories
    # outcome: true or false result, depending of whether there are no differences

    v1_data_directory = @fixtures.join('data/jq937jp0017/v1')
    v1_inventory_pathname = @fixtures.join('derivatives/ingests/jq937jp0017/v0001/versionInventory.xml')
    v1_inventory = FileInventory.parse(v1_inventory_pathname.read)
    opts = {}
    file_inventory_difference = FileInventoryDifference.new(opts)
    file_inventory_difference.verify_against_directory(v1_inventory,v1_data_directory).should == true
  end

end{code}

{anchor:FileGroupDifference}
h3. Class Moab::FileGroupDifference

h4. Description

Performs analysis and reports the differences between two matching [#FileGroup] objects.
The descending elements of the report hold a detailed breakdown of file-level differences, organized by change type.
This stanza is a child element of [#FileInventoryDifference], the documentation of which contains a full example.

In order to determine the detailed nature of the differences that are present between the two manifests,
this algorithm first compares the sets of file signatures present in the groups being compared,
then uses the result of that operation for subsequent analysis of filename correspondences.

For the first step, a Ruby Hash is extracted from each of the of the two groups, with an array of
[#FileSignature] object used as hash keys, and the corresponding [#FileInstance] arrays as the hash values.
The set of keys from the basis hash can be compared against the keys from the other hash using [#Array] operators:
* _matching_  = basis_array & other_array
* _basis_only_ = basis_array - other_array
* _other_only_ = other_array - basis_array

For the second step of the comparison, the matching and non-matching sets of hash entries
are further categorized as follows:
* _identical_ = signature and file path is the same in both basis and other file group
* _renamed_ = signature is unchanged, but the path has moved
* _modified_ = path is present in both groups, but the signature has changed
* _deleted_ = signature and path are only in the basis inventory
* _added_ = signature and path are only in the other inventor



{anchor:FileGroupDifferenceSubset}
h3. Class Moab::FileGroupDifferenceSubset

h4. Description

A container for reporting a set of file-level differences of the type specified by the change attribute



{anchor:FileInstanceDifference}
h3. Class Moab::FileInstanceDifference

h4. Description

A container for recording difference information at the file level
* If there was no change, the change type is set to _identical_
* If the signature is unchanged, but the path has moved, the change type is set to _renamed_
* If path is unchanged, but the signature has changed, the change type is set to _modified_ and both signatures are reported
* If the signature and path are only in the basis inventory, the change type is set to _deleted_
* If the signature and path are only in the other inventory, the change type is set to _added_
This is a child element of [#FileGroupDifferenceSubset], which is in turn a descendent of [#FileInventoryDifference],
the documentation of which contains a full example



{anchor:FileSignature}
h3. Class Moab::FileSignature

h4. Description

The fixity properties of a file, used to determine file content equivalence regardless of filename.


